

认识策略模式
    策略模式的重心
    算法的平等性
    运行时策略的唯一性
    公有的行为
策略模式的优点
    1）策略模式提供了管理相关的算法族的办法。 策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面。从而避免代码重复
    2）避免使用多重if-else语句。 多重条件语句不易维护。
策略模式的缺点
    1)客户端必须知道所有的策略类，并自行决定使用哪一个策略类。 这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适合用于客户端知道算法或行为的情况。
    2）由于策略模式把每个具体的策略实现都单独封装成为类，如果策略多的话，那么对象的数目就会很多。


实现策略模式：
    环境类（Context）: 用来操作策略的上下文环境。 封装类或者说策略的容器类。
    抽象策略类（Strategy）:策略的抽象，抽象出算法或者共有行为.
    具体策略类（ConcreteStrategy）: 具体的策略实现，对抽象方法进行具体实现。


与其他模式的区别
    1） 与状态模式的区别
        策略模式只是条件选择方法，只执行一次方法，
        而状态模式是随着状态的改变不停地更改执行方法。
        举个例子，就好比我们旅游，对于策略模式我们只需要选择其中一种出行方法就好了，但是状态模式不一样，可能我们到了A地点选择的是火车，到了B地点又选择飞机，根据不同的状态选择不同的出行方式。
    2）与工厂模式的区别
        工厂模式是创建型模式，它关注对象创建，提供创建对象的接口，让对象的创建与具体的使用客户无关。
        策略模式是对象行为模式，它关注行为和算法的封装。
        举个例子，还是我们出去旅游，对于策略模式我们只需要选择其中一种出行方法就好，但是工厂模式不同，工厂模式是你决定哪种旅行方案后，由工厂代替你去构建具体方案（工厂代替你去买火车票）。


使用场景举例：
    1） 诸葛亮的锦囊妙计，每一个锦囊就是一个策略
    2）旅行的出行方式，选择骑自行车、坐汽车，每种旅行方式都是一个策略
