package com.ming.leetCode;

/**
 * 190. 颠倒二进制位
 *
 * 颠倒给定的 32 位无符号整数的二进制位。
 *示例 1：
 *
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 *
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 *
 * @Author ming
 * @time 2020/2/21 10:34
 */
public class Solution190 {

    public int reverseBits(int n) {
        //Integer.reverse(n); 方法
        n = (n & 0x55555555) << 1 | (n >>> 1) & 0x55555555;
        n = (n & 0x33333333) << 2 | (n >>> 2) & 0x33333333;
        n = (n & 0x0f0f0f0f) << 4 | (n >>> 4) & 0x0f0f0f0f;
        n = (n << 24) | ((n & 0xff00) << 8) |
                ((n >>> 8) & 0xff00) | (n >>> 24);
        return n;
    }

    /**
     * 解法一
     * 用一个变量res 去存储结果，依次得到要转换数字的低位，然后依次保存到res中。
     * res每得到一位后进行左移腾出位置保存下一位。
     * 举例：
     *   原来数字 1011， res =0
     *
     *   res左移一位，res =0;
     *   得1011最低位 1 加过来，res = 1
     *   1011右移一位 变成了 101
     *
     *   res=1 左移动一位， res =10
     *   得到101 的最低位1，加过来 res = 11
     *   101右移一位变为10
     *
     *   res=11 左移动一位， res = 110
     *   得到 10 的最低位 0 ，加过来 res = 110
     *   10右移一位 变为 1
     *
     *   res = 110 左移动一位 ， res = 1100
     *   得到1 的最低位 1，加过来 res = 1101
     *   1 右移一位 变成0 结束
     *  至于 怎么得到最低位，和把最低位加过来，我们可以通过位操作完成
     * @param n
     * @return
     */
    public int reverseBits1(int n) {

        int res = 0;
        int count = 0;
        while(count < 32){
            res <<= 1;//res 左移一位，空出位置
            res |= (n & 1);//得到 最低位加过来
            n >>= 1;// 原数字右移一位 去掉已经处理过的最低位
            count++;
        }

        return res;
    }
}
